<?php
namespace abox;
require_once("core.php");
require_once("queries.php");
/*
 * @class
 *
 * Implements a layer betwin user and database, also handle automatic queries
 * ex. to create a new user:
 * //initialize an object pointed to 'Users' table and pass an 'array()' as parameter, the array must be a mirror from assoc()
 * $x = new Data("Users",["name"=>"Rafael Bertolini", "user"=>"rafsb", "pswd"=>"1234", "code"=>get_hash()]);
 * $x->build(AB_INSERT);
 * $x->query();
 */
class Data
{
    /*
     * @attribute 
     * 
     * pointer to a table on database
     *
     */
    private $table;
    
    /*
     * @attribute 
     * 
     * an array() that corresponds to a touple
     *
     */
    private $register = ["code"=>null];

    /*
     * @attribute 
     * 
     * the SQL string generated automatically
     *
     */
    private $query;

    public function value($f=null,$v=null)
    {
        if($f!==null)
        {
            if(isset($this->register[$f])){
                if($v!==null) $this->register[$f] = $v;
                return $this->register[$f];
            }else return $this->setColumn($f,$v);
        }
        else
        {
            return 0;
        }
    }

    public function remove($f)
    {
         if($f!==null && isset($this->register[$f]))
        {
            unset($this->register[$f]);
            return 1;
        }
        else
        {
            return 0;
        }
    }

    public function setColumn($f=null,$v=null)
    {
        if($f!==null && $v!==null)
        {
            $this->register[$f] = $v;
            return $this->register[$f];
        }
        else
        {
            return 0;
        }
    }

    /*
     * @member function
     *
     * initialize the class, building the inner object's information
     * $t = table's name
     * $r = register as an array()
     *
     */
    public function init($t=0, $r=0){ $this->table=$t; $this->register=$r; }

    /*
     * @member function
     *
     * build the SQL query by its arguments
     * $w = which mode will be used, the modes are: AB_INSERT, AB_UDDATE and AB_DELETE
     *
     */
    public function build($w=AB_INSERT){
        if($this->table && $this->register && gettype($this->register)=="array"){
            $s = "";
            $t = "";
            switch($w){
                case(AB_INSERT):{
                    $s .= "insert into ".ucfirst($this->table)."(";
                    foreach($this->register as $fild=>$val0){
                        $s.=$fild.",";
                        if($val0)
                        {
                            $tmp=gettype($val0);
                            if($tmp=="integer" || $tmp=="double" || $tmp=="boolean") $q = ""; else $q = "'";
                            $t.=$q.$val0.$q.",";
                        }
                        else $t.="'0',";
                    }
                    $s = substr($s, 0, -1).") values (".$t;
                    $s = substr($s, 0, -1).")";
                    if(isset($this->register["code"]) && qio("select code from ".$this->table." where code='".$this->register["code"]."'")){
                            $s .= "| Register already exists under this code";
                    }
                }break;
                case (AB_UPDATE) : 
                    {
                        $s .= "update ".ucfirst($this->table)." set ";
                        foreach($this->register as $fild=>$val0)
                        {
                            $t = gettype($val0);
                            if($t=="integer" || $t=="double" || $t=="boolean") $q = ""; else $q = "'";
                            $s .= $fild."=".$q.$val0.$q.",";
                        }
                        $s = substr($s, 0, -1);
                        $s .= " where code='".$this->register["code"]."'";
                    } break;

                case (AB_DELETE) : { $s .= "delete from ".ucfirst($this->table)." where code='".$this->register["code"]."'"; } break;

                default : return atoo(["error"=>$w." not recognized"]); break;
            }
            $this->query = $s;
        }
        else $this->query = -1;
        return $this->query;
    }

    /*
     * @member function
     *
     * returns a SQL query automatically generated by build(), if its present
     *
     */
    public function seeQuery(){ return $this->query; }

    public function innerArray(){ return $this->register; }

    public function innerObject() { return atoo($this->register); }

     /*
     * @member funciton
     *
     * fires the execution of a query on database
     *
     */
    public function query($q=null){ return qin(($q?$q:$this->seeQuery())); }

    public function run($q=AB_INSERT){ 
        if(!$this->query) $this->build($q);
        return $this->query(null); 
    }

     /*
     * @constructor
     *
     * initialize the class, building the inner object's information
     * $t = table's name
     * $r = register as an array()
     *
     */
    public function __construct($t=0, $r=0){ if($t){ $this->init($t,$r); } }
}


/*
 * @class
 *
 * it's a front door for uploading files, usually used on pictures
 * ex. to upload an image:
 * //initialize an object making use of posted parameters (usually a form)
 * $x = new Pics("minhaFoto.png");
 * $x->path("../img/");
 * $x->query();
 *
 */